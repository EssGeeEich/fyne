// Code generated by go run gen.go; DO NOT EDIT.
//go:build !js
// +build !js

package async

import (
	"sync/atomic"
	"unsafe"

	"fyne.io/fyne/v2/internal/driver/common/copy"
)

// CopyCanvasObjectQueue implements lock-free FIFO freelist based queue.
//
// Reference: https://dl.acm.org/citation.cfm?doid=248052.248106
type CopyCanvasObjectQueue struct {
	head unsafe.Pointer
	tail unsafe.Pointer
	len  uint64
}

// NewCopyCanvasObjectQueue returns a queue for caching values.
func NewCopyCanvasObjectQueue() *CopyCanvasObjectQueue {
	head := &itemCopyCanvasObject{next: nil, v: nil}
	return &CopyCanvasObjectQueue{
		tail: unsafe.Pointer(head),
		head: unsafe.Pointer(head),
	}
}

type itemCopyCanvasObject struct {
	next unsafe.Pointer
	v    copy.CopyCanvasObject
}

func loadCopyCanvasObjectItem(p *unsafe.Pointer) *itemCopyCanvasObject {
	return (*itemCopyCanvasObject)(atomic.LoadPointer(p))
}

func casCopyCanvasObjectItem(p *unsafe.Pointer, old, new *itemCopyCanvasObject) bool {
	return atomic.CompareAndSwapPointer(p, unsafe.Pointer(old), unsafe.Pointer(new))
}
